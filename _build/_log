### Starting build.
# Target: rml_interpreter.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:rml_interpreter.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules rml_interpreter.ml > rml_interpreter.ml.depends # cached
# Target: dwt.mli.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:mli, file:dwt.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules dwt.mli > dwt.mli.depends # cached
# Target: dwt.cmi, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:mli, file:dwt.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o dwt.cmi dwt.mli # cached
# Target: eval.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:eval.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules eval.ml > eval.ml.depends # cached
# Target: pretty.mli.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:mli, file:pretty.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules pretty.mli > pretty.mli.depends # cached
# Target: types.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:types.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules types.ml > types.ml.depends # cached
# Target: types.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o types.cmo types.ml # cached
# Target: pretty.cmi, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:mli, file:pretty.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o pretty.cmi pretty.mli # cached
# Target: serialize.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:serialize.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules serialize.ml > serialize.ml.depends # cached
# Target: serialize.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:serialize.cmo, file:serialize.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o serialize.cmo serialize.ml # cached
# Target: eval.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o eval.cmo eval.ml # cached
# Target: io.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:io.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules io.ml > io.ml.depends # cached
# Target: io.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:io.cmo, file:io.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o io.cmo io.ml # cached
# Target: lexer.mll, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, thread, traverse, use_menhir }
/Users/Keely/.opam/4.06.1/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, thread, traverse, use_menhir }
menhir --ocamlc 'ocamlfind ocamlc -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o lexer.cmo lexer.ml # cached
# Target: rml_interpreter.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:rml_interpreter.cmo, file:rml_interpreter.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o rml_interpreter.cmo rml_interpreter.ml # cached
# Target: dwt.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:dwt.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules dwt.ml > dwt.ml.depends # cached
# Target: dwt.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:dwt.cmo, file:dwt.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o dwt.cmo dwt.ml # cached
# Target: parser.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o parser.cmo parser.ml # cached
# Target: pretty.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:pretty.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules pretty.ml > pretty.ml.depends # cached
# Target: pretty.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:pretty.cmo, file:pretty.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o pretty.cmo pretty.ml # cached
# Target: rml_interpreter.byte, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, dont_link_with, extension:byte, file:rml_interpreter.byte, link, ocaml, program, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson io.cmo dwt.cmo types.cmo serialize.cmo pretty.cmo eval.cmo parser.cmo lexer.cmo rml_interpreter.cmo -o rml_interpreter.byte # cached
# Target: rml_server.ml.depends, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), extension:ml, file:rml_server.ml, ocaml, ocamldep, quiet, thread, traverse, use_menhir }
ocamlfind ocamldep -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -modules rml_server.ml > rml_server.ml.depends # cached
# Target: rml_server.cmo, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:rml_server.cmo, file:rml_server.ml, implem, ocaml, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -c -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson -o rml_server.cmo rml_server.ml # cached
# Target: rml_server.byte, tags: { package(camomile), package(lambda-term), package(lwt), package(lwt.unix), package(oUnit), package(ppx_deriving_yojson), package(react), package(str), package(yojson), byte, dont_link_with, extension:byte, file:rml_server.byte, link, ocaml, program, quiet, thread, traverse, use_menhir }
ocamlfind ocamlc -linkpkg -thread -package camomile -package react -package lambda-term -package oUnit -package lwt -package str -package lwt.unix -package ppx_deriving_yojson -package yojson io.cmo dwt.cmo types.cmo serialize.cmo rml_server.cmo -o rml_server.byte # cached
# Compilation successful.
